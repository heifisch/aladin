<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="ZUGFeRD" script:language="StarBasic" script:moduleType="normal">&apos; Erstellt von Heiko Fischer
&apos; heiko.fischer@aladin-gmbh.de  -  www.aladin-gmbh.de
&apos; Veröffentlicht unter GPL
REM  *****  BASIC  *****
Option Explicit

Sub ZUGFeRD_erzeugen()
	Dim sPraefix As String,stZugferdDir As String,stZugferdBaseName As String
	Dim sValidatorReturnCode As String,sValidatorReturnCodeFile As String,sValidatorReportHtml as String,sValidatorReportXml as String
	Dim sMustangReportPdf As String
	Dim oShell As Object,oSimpleFileAccess As Object,oTextInputStream As Object,vStatus As Variant

	If iDocTypID = 5 Then
		If iOption_AZ = 1 then
			sPraefix=&quot;AZ&quot;
		else
			sPraefix=&quot;RE&quot;
		End if
	Elseif iDocTypID = 6 then
		sPraefix=&quot;GU&quot;
	End If
	
	stZugferdDir = sPathAusgangsRechnungen &amp; &quot;/&quot; &amp; sPraefix &amp; CStr(lDocumentID)

	If NOT FileExists(ConvertToURL(stZugferdDir)) then
		MkDir ConvertToURL(stZugferdDir)
	End If
	
	stZugferdBaseName = stZugferdDir &amp; &quot;/&quot; &amp; sPraefix &amp; CStr(lDocumentID) &amp; &quot;_ZUGFeRD&quot;
	
	If (iDocTypID = 5 or iDocTypID = 6) Then
		stXRechnungPath = stZugferdBaseName &amp; &quot;.xml&quot;
		If FileExists(ConvertToURL(stXRechnungPath)) then
			vStatus=MsgBox(&quot;Es ist schon folgende ZUGFeRD-Datei im Archiv abgelegt:&quot;&amp; Chr(13) &amp; Chr(13) &amp;_
				stXRechnungPath &amp; Chr(13) &amp; Chr(13) &amp; Chr(13) &amp;_
				&quot;Soll die vorhandene ZUGFeRD-Datei überschrieben werden?&quot;,36,sTitle)
			If vStatus &lt;&gt; 6 Then
				MsgBox(&quot;Die vorhandene ZUGFeRD-Datei wurde nicht überschrieben!&quot;,64,sTitle_lokal)
				exit Sub		
			End if
		End if
	End If
	
	SaveZUGFeRD(ConvertToURL(stXRechnungPath))

	If Not FileExists(ConvertToURL(stXRechnungPath)) Then
		MsgBox(&quot;ZUGFeRD-Datei wurde nicht erzeugt!&quot;,64,sTitle_lokal)
		exit Sub		
	Else
		If Not FileExists(ConvertToURL(sScriptsPath &amp; &quot;mustang.sh&quot;)) Then
			MsgBox(&quot;Kein Validator gefunden!&quot;,64,sTitle_lokal)
			exit Sub		
		End If
	End If
	
	sMustangReportPdf=ConvertToURL(stZugferdBaseName &amp; &quot;_result.pdf&quot;)
	sValidatorReportHtml=ConvertToURL(stZugferdBaseName &amp; &quot;-report.html&quot;)
	sValidatorReportXml=ConvertToURL(stZugferdBaseName &amp; &quot;-report.xml&quot;)
	sValidatorReturnCodeFile=ConvertToURL(stZugferdBaseName &amp; &quot;-returncode.txt&quot;)
	
	If FileExists(sValidatorReportHtml) Then Kill sValidatorReportHtml
	If FileExists(sValidatorReportXml) Then Kill sValidatorReportXml
	If FileExists(sValidatorReturnCodeFile) Then Kill sValidatorReturnCodeFile
	
	Shell(sScriptsPath &amp; &quot;mustang.sh&quot;,1,stXRechnungPath,True)

	If FileExists(sValidatorReportXml) Then Kill sValidatorReportXml
	
	oSimpleFileAccess = CreateUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oTextInputStream = CreateUnoService(&quot;com.sun.star.io.TextInputStream&quot;)

	If oSimpleFileAccess.Exists(sValidatorReturnCodeFile) Then
		oTextInputStream.setInputStream(oSimpleFileAccess.openFileRead(sValidatorReturnCodeFile))
		Do While Not oTextInputStream.isEOF
			sValidatorReturnCode=oTextInputStream.readLine
		Loop
		oTextInputStream.closeInput()
		If sValidatorReturnCode &lt;&gt; &quot;0&quot; Then
			If FileExists(sMustangReportPdf) Then
				vStatus=MsgBox(&quot;Achtung! Es ist ein Fehler bei der Validierung der ZUGFeRD-Datei aufgetreten!&quot; &amp; Chr$(13) &amp; Chr$(13) &amp;_
				&quot;Wollen Sie sich das Ergebnis der Validierung ansehen?&quot;,52,sTitle_lokal)
				if vStatus=6 Then
					oShell = createUnoService(&quot;com.sun.star.system.SystemShellExecute&quot;)
					oShell.execute(sMustangReportPdf,&quot;&quot;,0)
				End If
			Else
				MsgBox(&quot;Es ist ein Fehler bei der Validierung der ZUGFeRD-Datei aufgetreten!&quot; &amp; Chr$(13) &amp; Chr$(13) &amp;_
				&quot;Fehlercode: &quot;&amp; sValidatorReturnCode,64,sTitle_lokal)
			End If
		Else
			If FileExists(sValidatorReturnCodeFile) Then Kill sValidatorReturnCodeFile
		End if
	Else
		MsgBox(&quot;Es wurde kein Return-Code vom Validator gefunden!&quot;,64,sTitle_lokal)
	End if
End Sub

REM ZUGFeRD (Zentraler User Guide des Forums elektronische Rechnung Deutschland)
REM werden UN/CEFACT Cross Industry Invoice in XML Schemas 16B (in der Spezifikation Standard XRechnung als &quot;CII&quot; abgekürzt) erstellt.
REM Die exportierte XML-Datei wird nach dem Export über die Kommandozeile und pdftk an die PDF-Datei angehängt
REM pdftk rec.pdf attach_files rec.xml relation Source output out.pdf
REM Die erzeugte Datei muss dem PDF/A-3-Dateiformat entsprechen, da nur hier Anhänge erlaubt sind.
REM +++ Wird aus &quot;Druck → ExportPDF&quot; aufgerufen
SUB SaveZUGFeRD(stXRechnungPath AS STRING)
	Dim vStatus as Variant
	Dim sSQL1 as String,sSQL2 as String,sSQL3 as String,sSQL4 as String,sSQL5 as String
	Dim oRecord1 as Object,oRecord2 as Object,oRecord3 as Object
	Dim	iOptionInhaber as Integer,sGeschaeftsfuehrer as String,sHRB as String,sAmtsgericht as String,sSitz as String
	Dim sHREintragForm As String,sPraefix As String,sInvoiceTypeCode As String,stSkontoSatz As String,stSkontoTage As String,stSkontoBis As String,stSkonto As String
	Dim sAZ_Text As String,stFaelligTage As String,sDocumentID_Korrekturrechnung As String

	DIM oUcb AS OBJECT, oOutputStream AS OBJECT, oFile AS OBJECT
	DIM stID AS STRING, stSql AS STRING, stNetto AS STRING, stSteuer AS STRING, stBrutto AS STRING
	DIM stRStellFirma AS STRING, stRStellStr AS STRING, stRStellPlz AS STRING, stRStellStadt AS STRING, stRStellEMail AS STRING, stRStellTel AS STRING, stRStellUST_IdNr AS STRING
	DIM stRStellAbwHandelsname AS STRING, stZahlungIBAN AS STRING, stZahlungBIC AS STRING, stZahlungEmpfaenger AS STRING, stZahlungNotiz AS STRING, stRStellHRAEintragID AS STRING
	DIM stRStellHRAEintragForm AS STRING, stRStellKonName AS STRING, stRStellKonEMail AS STRING, stRStellKonTel AS STRING, stKaufID AS STRING, stKaufName AS STRING, stKaufStr AS STRING
	DIM stKaufPlz AS STRING, stKaufStadt AS STRING, stKaufLandCode AS STRING, stKaufEMail AS STRING, stRDatum AS STRING, stRZahlungBisDatum AS STRING, stRKaufRef AS STRING, stRNummer AS STRING
	DIM stInvoiceTypeCode AS STRING, stDocumentCurrencyCode AS STRING, stCountryIdentificationCode AS STRING, stPaymentMeansCode AS STRING, stKaufUST_IdNr As String
	DIM stFileUrl AS STRING, stString AS STRING, stDataAmountTotal AS STRING, stAllowanceTotalAmount AS STRING, stChargeTotalAmount AS STRING, stKaufCompID AS STRING
	DIM stLDatum AS STRING, stLFirma AS STRING, stLStr AS STRING, stLPlz AS STRING, stLStadt AS STRING, stLLandCode AS STRING, stLAddress AS STRING, stDelivery AS STRING
	DIM stGlaeubID AS STRING, stIBANEmpfaenger AS STRING, stMandateID AS STRING, stSteuerfreiheit AS STRING, stRStellSteuerNr AS STRING, stPurchaseID As String, stSalesID As String
	DIM stTenderID AS STRING, stObjectID AS STRING, stAccounting AS STRING, stSellerID AS STRING, stSellerICDCode AS STRING, stProjectID As String, stContractID As String
	Dim stKaufAnsprechP As String, stKaufAnsprechPTel As String, stKaufAnsprechPEMail As String, stRStartDate As String, stREndDate As String, stRAnmerkung As String
	Dim stVorRechnungID As String, stPrepaidAmount As String, stPayableAmount As String

	DIM inTab AS INTEGER, inI AS INTEGER, i AS INTEGER, inAttach AS Integer, t As Integer
	DIM doDataAmountTotal AS DOUBLE, doAllowanceTotalAmount AS DOUBLE, doChargeTotalAmount AS DOUBLE
	DIM arDataID(), arDataDescription(), arDataName(), arDataQuantity(), arDataPrice(), arDataRabatt(), arDataAmount(), arDataTax(), arDataTaxID (), arDataQuantityUnitCode(), arDataSellID()
	DIM arDataStartDate(), arDataEndDate(), arDataRow(), arDataKonto(), arDataRabattIndicator(), arAllowanceChargeBaseAmount(), arAllowanceChargeTaxID()
	DIM arAllowanceChargeReason(), arAllowanceChargeAmount(), arAllowanceChargeTax(), arAllowanceChargeIndicator(), arAllowanceChargePercent()
	Dim arTaxPercent(0), arTaxNetto(0), arTaxTax(0), arTaxID(0)
	DIM arAttachFilename(), arAttachDescription(), arAttachMimeCode(), arAttachFile(), arVor(), arDocRefID(), arDocRefDate()

	REM Zuerst werden durch Ansichten und Abfragen veränderbare Daten aufgeführt.
	REM Anschließend kommen einige zentrale Variablen hinzu, die zur Zeit nicht aus der Datenbank bestückt werden.
	REM Die zentralen Variablen sind: Währung (EUR), Land des Rechnungsstellers (DE), Rechnungstyp (Handelrechnung, Code 380), Zahlungscode (IBAN innerhalb SEPA-Raum, Code 58)

	If iDocTypID = 5 Then
		if iOption_AZ = 1 then
			sPraefix=&quot;AZ&quot;
		else
			sPraefix=&quot;RE&quot;
		End if
		sInvoiceTypeCode=&quot;t3.RechnungsTypCodeID&quot;
		sDocumentID_Korrekturrechnung=&quot;t3.DocumentID_Korrekturrechnung&quot;
	Elseif iDocTypID = 6 then
		sPraefix=&quot;GU&quot;
		sInvoiceTypeCode=&quot;&apos;381&apos;&quot;
		sDocumentID_Korrekturrechnung=0
	End If

	sSQL2=&quot;SELECT DISTINCT &quot;&amp;_
		&quot;TRIM(CONCAT(t4.Name1,&apos; &apos;,t4.Name2,&apos; &apos;,t4.Name3,&apos; &apos;,t4.Name4)) AS stRStellFirma_1,&quot;&amp;_
		&quot;TRIM(CONCAT(t4.Strasse,&apos; &apos;,t4.Hausnummer)) AS stRStellStr_2,t4.PLZ AS stRStellPlz_3,t4.Ort AS stRStellStadt_4,&quot;&amp;_
		&quot;t4.EMail AS stRStellEMail_5,t4.Url AS stRStellUrl_6,t4.Telefon AS stRStellTel_7,&quot;&amp;_
		&quot;t4.UmsatzsteuerID AS stRStellUST_IdNr_8,TRIM(CONCAT(t4.Name1,&apos; &apos;,t4.Name2,&apos; &apos;,t4.Name3,&apos; &apos;,t4.Name4)) AS stRStellAbwHandelsname_9,&quot;&amp;_
		&quot;t4.Bank AS stZahlungBank_10,t4.IBAN AS stZahlungIBAN_11,t4.BIC AS stZahlungBIC_12,&quot;&amp;_
		&quot;t4.Name1 AS stZahlungEmpfaenger_13,t4.HRB AS stRStellHRAEintragID_14,&quot;&amp;_
		&quot;(CASE WHEN t4.OptionInhaber=0 THEN &quot;&amp;_
			&quot;TRIM(CONCAT(&apos;Sitz der Gesellschaft: &apos;,t4.Ort,&apos;, Registergericht: &apos;,t4.Amtsgericht,&apos;, Geschäftsführer: &apos;,t4.Geschaeftsfuehrer)) &quot;&amp;_
		&quot;END) AS stRStellHRAEintragForm_15,&quot;&amp;_
		&quot;NULL AS NULL_16,NULL AS stZahlungNotiz_17,NULL AS stRStellKonName_18,NULL AS stRStellKonEMail_19,NULL AS stRStellKonTel_20,&quot;&amp;_
		&quot;t1.KontaktID AS stKaufID_21,TRIM(CONCAT(t1.Vorname,&apos; &apos;,t1.Name1,&apos; &apos;,t1.Name2,&apos; &apos;,t1.Name3,&apos; &apos;,t1.Name4)) AS stKaufName_22,&quot;&amp;_
		&quot;TRIM(CONCAT(t2.Vorname,&apos; &apos;,t2.Name)) AS stKaufAnsprechP_23,NULL AS NULL_24,TRIM(CONCAT(t1.Strasse,&apos; &apos;,t1.Hausnummer)) AS stKaufStr_25,&quot;&amp;_
		&quot;t1.PLZ AS stKaufPlz_26,t1.Ort AS stKaufStadt_27,UPPER(SUBSTRING(t1.Land,1,2)) AS stKaufLandCode_28,&quot;&amp;_
		&quot;t1.EMail AS stKaufEMail_29,NULL AS NULL_30,NULL AS NULL_31,NULL AS NULL_32,t3.Erstellungsdatum AS stRDatum_33,t3.gueltig_bis AS stRZahlungBisDatum_34,&quot;&amp;_
		&quot;t3.KontaktID AS stRKaufRef_35,CONCAT(&apos;&quot;&amp; sPraefix &amp;&quot; &apos;,t3.DocumentID) AS stRNummer_36,t1.UmsatzsteuerID AS stKaufUST_IdNr_37,&quot;&amp;_
		sInvoiceTypeCode &amp;&quot; AS stInvoiceTypeCode_38,t3.Erstellungsdatum AS stLDatum_39,NULL AS stLFirma_40,NULL AS stLStr_41,NULL AS stLPlz_42,NULL AS stLStadt_43,&quot;&amp;_
		&quot;NULL AS stLLandCode_44,NULL AS stRStartDate_45,NULL AS stREndDate_46,NULL AS stProjectID_47,NULL AS stContractID_48,&quot;&amp;_
		&quot;NULL AS stPurchaseID_49,NULL AS stSalesID_50,&quot;&amp;_
		&quot;(CASE WHEN &quot;&amp; sInvoiceTypeCode &amp;&quot;=384 AND &quot; &amp; sDocumentID_Korrekturrechnung &amp; &quot;&gt;0 THEN &quot; &amp; sDocumentID_Korrekturrechnung &amp; &quot; END) AS stVorRechnungID_51,&quot;&amp;_
		&quot;NULL AS stKaufCompID_52,&quot;&amp;_
		&quot;TRIM(CONCAT(&quot;&amp;_
			&quot;(CASE WHEN LENGTH(t3.Document_Typ)&gt;0 THEN CONCAT(t3.Document_Typ,&apos;\n&apos;) ELSE &apos;&apos; END),&quot;&amp;_
			&quot;(CASE WHEN t3.ProjektID&gt;0 THEN CONCAT(t5.Projekt_Name,&apos;\n&apos;) ELSE &apos;&apos; END),&quot;&amp;_
			&quot;(CASE WHEN LENGTH(t3.Document_Name)&gt;0 THEN CONCAT(t3.Document_Name,&apos;\n\n&apos;) ELSE &apos;&apos; END),&quot;&amp;_
			&quot;(CASE WHEN &quot;&amp; sInvoiceTypeCode &amp;&quot;=384 AND &quot; &amp; sDocumentID_Korrekturrechnung &amp; &quot;&gt;0 THEN &quot;&amp;_
				&quot;CONCAT(&apos;Korrektur zu Rechnung &apos;,&quot;&amp;_
				&quot;(SELECT CONCAT(CASE WHEN AZ=1 THEN &apos;AZ&apos; ELSE &apos;RE&apos; END,&apos; &apos;,DocumentID) FROM &quot;&amp; sTabelle1 &amp;&quot; WHERE DocumentID=stVorRechnungID_51),&quot;&amp;_
				&quot;&apos; vom &apos;,DATE_FORMAT((SELECT Erstellungsdatum FROM &quot;&amp; sTabelle1 &amp;&quot; WHERE DocumentID=stVorRechnungID_51),&apos;%d.%m.%Y&apos;),&apos;\n\n&apos;) ELSE &apos;&apos; END),&quot;&amp;_
			&quot;(CASE WHEN LENGTH(t3.Leistungsempfaenger)&gt;0 THEN CONCAT(&apos;Leistungsempfänger:\n&apos;,t3.Leistungsempfaenger,&apos;\n\n&apos;) ELSE &apos;&apos; END),&quot;&amp;_
			&quot;(CASE WHEN LENGTH(t3.Lieferbemerkung)&gt;0 THEN CONCAT(t3.Lieferbemerkung,&apos;\n\n&apos;) ELSE &apos;&apos; END),&quot;&amp;_
			&quot;(CASE WHEN LENGTH(t3.Bemerkung)&gt;0 THEN CONCAT(t3.Bemerkung,&apos;\n\n&apos;) ELSE &apos;&apos; END))) AS stRAnmerkung_53,&quot;&amp;_
		&quot;NULL AS stGlaeubID_54,NULL AS stIBANEmpfaenger_55,NULL AS stMandateID_56,&quot;&amp;_
		&quot;(CASE WHEN t3.13b=1 THEN t3.13bText WHEN t3.USt_befreit=1 THEN t3.USt_befreit_Text ELSE NULL END) AS stSteuerfreiheit_57,&quot;&amp;_
		&quot;t4.Umsatzsteuernummer AS stRStellSteuerNr_58,NULL AS stTenderID_59,NULL AS stObjectID_60,NULL AS stAccounting_61,NULL AS stSellerID_62,&quot;&amp;_
		&quot;NULL AS stSellerICDCode_63,NULL AS stDocumentCurrencyCode_64,t2.Telefon AS stKaufAnsprechPTel_65,t2.EMail AS stKaufAnsprechPEMail_66,&quot;&amp;_
		&quot;(CASE WHEN t3.13b=1 THEN &apos;AE&apos; WHEN t3.USt_befreit=1 THEN &apos;E&apos; ELSE &apos;S&apos; END) AS arTaxID_67,t3.MwSt_Satz AS arTaxPercent_68,&quot;&amp;_
		&quot;t3.Rabatt_Satz AS arAllowanceChargePercent_69,&apos;Rabatt&apos; AS arAllowanceChargeReason_70,&apos;false&apos; AS arAllowanceChargeIndicator_71,&quot;&amp;_
		&quot;t3.Summe_ohne_MwSt AS arAllowanceChargeBaseAmount_72,t3.Rabatt AS arAllowanceChargeAmount_73,&quot;&amp;_
		&quot;t3.Korrektur_Satz AS arAllowanceChargePercent_74,t3.Korrektur_Anlass AS arAllowanceChargeReason_75,&quot;&amp;_
		&quot;(CASE WHEN t3.Korrektur_Vorzeichen=&apos;-&apos; THEN &apos;false&apos; ELSE &apos;true&apos; END) AS arAllowanceChargeIndicator_76,&quot;&amp;_
		&quot;t3.Summe_nach_Rabatt AS arAllowanceChargeBaseAmount_77,t3.Korrektur AS arAllowanceChargeAmount_78,&quot;&amp;_
		&quot;t3.Summe_nach_Korrektur AS arTaxNetto_79,t3.MwSt AS arTaxTax_80,t3.Summe_mit_MwSt AS stBrutto_81,t3.AZ_mit_MwSt AS stPrepaidAmount_82,&quot;&amp;_
		&quot;t3.Zahlbetrag_mit_MwSt AS stPayableAmount_83,t3.Skonto_Satz AS stSkontoSatz_84,t3.Skonto_Tage As stSkontoTage_85,&quot;&amp;_
		&quot;DATE_FORMAT(t3.Skonto_bis,&apos;%d.%m.%Y&apos;) AS stSkontoBis_86,t3.Skonto AS stSkonto_87,&quot;&amp;_
		&quot;(SELECT CONCAT(CASE WHEN AZ=1 THEN &apos;AZ&apos; ELSE &apos;RE&apos; END,&apos; &apos;,DocumentID) FROM &quot;&amp; sTabelle1 &amp;&quot; WHERE DocumentID=stVorRechnungID_51) AS stVorRechnungID_88,&quot;&amp;_
		&quot;(SELECT Erstellungsdatum FROM &quot;&amp; sTabelle1 &amp;&quot; WHERE DocumentID=stVorRechnungID_51) AS stVorRechnungDatum_89,t3.Faellig_Tage AS stFaelligTage_90&quot;

	sSQL2=sSQL2 &amp;&quot; FROM &quot;&amp; sTabelle1 &amp;&quot; as t3 &quot;&amp;_
		&quot;LEFT OUTER JOIN &quot;&amp; sAnsprechpartner &amp;&quot; as t2 &quot;&amp;_
		&quot;ON t2.AnsprechpartnerID=t3.AnsprechpartnerID,&quot;&amp;_
		sKontakte &amp;&quot; as t1,&quot;&amp;_
		&quot;Einstellungen as t4,&quot;&amp;_
		sProjekte &amp;&quot; as t5&quot;&amp;_
		&quot; WHERE t3.DocumentID=&quot;&amp; lDocumentID &amp;_
		&quot; AND t1.KontaktID=t3.KontaktID&quot;&amp;_
		&quot; AND t4.EinstellungsID= &quot;&amp; iEinstellungsID_lokal &amp;_
		&quot; AND t5.ProjektID=t3.ProjektID&quot;

	oRecord2=oResult(sSql2)
	doAllowanceTotalAmount = 0
	doChargeTotalAmount = 0
	inI = 0
	
	REM Variablen, die über die Datenbank bestückt werden
	REM Spezifikation XRechnung mit Datentyp - [1]: genau einmal, Pflichteintrag; [0..1]: maximal einmal, kein Pflichteintrag
	REM Abfrage ergibt nur einen Datensatz. WHILE-Schleife eigentlich nicht notwendig
	WHILE oRecord2.Next		
		REM Das Wurzelelement INVOICE
		stRNummer = CharToXMLChar(oRecord2.getString(36))	&apos;Invoice number : Identifier [1]	[BT-1]
		stRDatum = Join(Split(oRecord2.getString(33),&quot;-&quot;),&quot;&quot;)	&apos;Invoice issue date : Date [1]	[BT-2]
		stInvoiceTypeCode = oRecord2.getString(38)	&apos;Invoice type code : Code [1]	[BT-3]
		REM Ein Code, der den Funktionstyp der Rechnung angibt. Anmerkung: Der Rechnungstyp muss gemäß UNTDID 1001 spezifiziert werden.  
		REM Code ist auch als &quot;tbl_Rechnungstyp_Code&quot; der Datenbank beigefügt
		REM Folgende Codes aus der Codeliste sollen verwendet werden: 
		REM 326 (Partial invoice)		dt: Abschlagsrechnung
		REM 380 (Commercial invoice)	dt: Handelsrechnung
		REM 384 (Corrected invoice)		dt: korrigierte Rechnung
		REM 389 (Self-billed invoice)	dt: selbstfakturierte Rechnung (fakturieren → ausschreiben, also selbsterstellte Rechnung)
		REM 381 (Credit note)			dt: Gutschrift
		REM folgende Nummern für Bauvorhaben?
		REM 875 (Partial construction invoice)			dt: Teilbaurechnung
		REM 876 (Partial final construction invoice)	dt: Teilschlussrechnung Bau
		REM 877 (Final construction invoice)			dt: Baufertigstellungsrechnung
		REM Angebote haben nichts mit XRechnung zu tun.
		stDocumentCurrencyCode = oRecord2.getString(64)					&apos;Invoice currency code : Code [1] [BT-5]	
		IF stDocumentCurrencyCode = &quot;&quot; THEN stDocumentCurrencyCode = &quot;EUR&quot;	REM CurrencyCode nach CurrencyCode-2.4.gc, € gibt es da nicht
		stRZahlungBisDatum = Join(Split(oRecord2.getString(34),&quot;-&quot;),&quot;&quot;)	&apos;Payment due date : Date [0..1]	[BT-9]
		stRKaufRef = CharToXMLChar(oRecord2.getString(35))				&apos;Buyer reference : Text [1]	[BT-10]	
		stProjectID = CharToXMLChar(oRecord2.getString(47))				&apos;Project reference : Document Reference [0..1] [BT-11]
		stContractID = CharToXMLChar(oRecord2.getString(48))			&apos;Contract reference : Document Reference [0..1] [BT-12]
		stPurchaseID = CharToXMLChar(oRecord2.getString(49))			&apos;Purchase order reference : Document Reference [0..1] [BT-13]
		stSalesID = CharToXMLChar(oRecord2.getString(50))				&apos;Sales order reference : Document Reference [0..1] [BT-14]
		IF stPurchaseID = &quot;&quot; AND stSalesID &lt;&gt; &quot;&quot; THEN stPurchaseID = &quot;NA&quot;	&apos;Angabe notwenig
		stTenderID = CharToXMLChar(oRecord2.getString(59))				&apos;Tender or lot reference : Document Reference [0..1] [BT-17]
		stObjectID = CharToXMLChar(oRecord2.getString(60))				&apos;Invoiced object identifier : Identifier [0..1] [BT-18]
		stAccounting = CharToXMLChar(oRecord2.getString(61))			&apos;Buyer accounting reference : Text [0..1] [BT-19]
		
		REM Bezahlung
		REM Gruppe CREDIT TRANSFER	[0..n]	[BG-17]
		stZahlungIBAN = oRecord2.getString(11)							&apos;Payment account identifier : Identifier [1]	[BT-84]
		stZahlungBIC = oRecord2.getString(12)							&apos;Payment service provider identifier : Identifier [0..1]	[BT-86]
		stZahlungEmpfaenger = CharToXMLChar(oRecord2.getString(13))		&apos;Payment account name : Text [0..1]	[BT-85]
		stZahlungNotiz = CharToXMLChar(oRecord2.getString(17))			&apos;Payment terms:	Text [0..1]	[BT-20]
		
		REM RechnungsstellerIn	
		REM Gruppe SELLER	[1]	[BG-4]
		stRStellFirma = CharToXMLChar(oRecord2.getString(1))			&apos;Seller trading name : Text [0..1]	[BT-28]
		stRStellEMail = CharToXMLChar(oRecord2.getString(5))			&apos;Seller electronic address : Identifier [1]	[BT-34]
		stRStellUST_IdNr =  CharToXMLChar(oRecord2.getString(8))		&apos;Seller VAT identifier : Identifier [0..1]	[BT-31]
		stRStellSteuerNr = CharToXMLChar(oRecord2.getString(58))		&apos;Seller tax registration identifier : Identifier [0..1] [BT-32]
		stRStellAbwHandelsname = CharToXMLChar(oRecord2.getString(9))	&apos;Seller name : Text [1]	[BT-27]
		REM Handelsregistereinträge
		stRStellHRAEintragID = CharToXMLChar(oRecord2.getString(14))	&apos;Seller legal registration identifier : Identifier [0..1]	[BT-30]
		stRStellHRAEintragForm = CharToXMLChar(oRecord2.getString(15))	&apos;Seller additional legal information : Text [0..1]	[BT-33]
		REM Gruppe SELLER → SELLER POSTAL ADDRESS	[1]	[BG-5]	
		stRStellStr = CharToXMLChar(oRecord2.getString(2))				&apos;Seller address line 1 : Text [0..1]	[BT-35]	
		stRStellPlz = CharToXMLChar(oRecord2.getString(3))				&apos;Seller post code : Text [1]	[BT-38]
		stRStellStadt = CharToXMLChar(oRecord2.getString(4))			&apos;Seller city : Text [1]	[BT-37]
		stRStellTel =  CharToXMLChar(oRecord2.getString(7))				&apos;ggf. Ersatz für Seller contact telephone number : Text [1]	[BT-42]
		REM RechnungsstellerMitarbeiter
		REM Gruppe SELLER → SELLER CONTACT [1] [BG-6]
		stRStellKonName = CharToXMLChar(oRecord2.getString(18))
		IF stRStellKonName = &quot;&quot; THEN stRStellKonName = stRStellFirma 	&apos;Seller contact point : Text [1] [BT-41]
		stRStellKonEMail = CharToXMLChar(oRecord2.getString(19))		
		IF stRStellKonEMail = &quot;&quot; THEN stRStellKonEMail = stRStellEMail	&apos;Seller contact email address : Text [1] [BT-43]
		stRStellKonTel = CharToXMLChar(oRecord2.getString(20))		
		IF stRStellKonTel = &quot;&quot; THEN stRStellKonTel = stRStellTel		&apos;Seller contact telephone number : Text [1]	[BT-42]
		stSellerID = CharToXMLChar(oRecord2.getString(62))				&apos;Seller identifier : Identifier [0..*] [BT-29]
		stSellerICDCode = oRecord2.getString(63)
		
		REM KäuferIn
		REM Gruppe BUYER [1] [BG-7]
		stKaufID = CharToXMLChar(oRecord2.getString(21))				&apos;Buyer identifier : Identifier [0..1] [BT-46]
		stKaufName = CharToXMLChar(oRecord2.getString(22))				&apos;Buyer name : Text [1] [BT-44]
		IF stKaufName = &quot;&quot; THEN stKaufName = CharToXMLChar(oRecord2.getString(23))	&apos;Buyer name : Text [1] [BT-44]
		stKaufCompID = oRecord2.getString(52)							&apos;Buyer legal registration identifier : Identifier [0..1] [BT-47]
		stKaufEMail = CharToXMLChar(oRecord2.getString(29))				&apos;Buyer electronic address : Identifier [1] [BT-49]
		stKaufUST_IdNr = CharToXMLChar(oRecord2.getString(37))			&apos;Buyer VAT identifier : Identifier [0..1] [BT-48]
		REM Gruppe BUYER → BUYER POSTAL ADDRESS : BUYER POSTAL ADDRESS [1]	[BG-8]
		stKaufStr = CharToXMLChar(oRecord2.getString(25))				&apos;Buyer address line 1 : Text [0..1]	[BT-50]
		stKaufPlz = CharToXMLChar(oRecord2.getString(26))				&apos;Buyer post code : Text [1]	[BT-53]
		stKaufStadt = CharToXMLChar(oRecord2.getString(27))				&apos;Buyer city : Text [1]	[BT-52]
		stKaufLandCode = oRecord2.getString(28)							&apos;Buyer country code : Code [1]	[BT-55]
		&apos;DE - Deutschland, NL - Niederlande, LU - Luxemburg, FR - Frankreich, CH - Schweiz … (2 Buchstaben, groß geschrieben)
		REM Gruppe BUYER → BUYER CONTACT : BUYER CONTACT [0..1]	[BG-9]
		stKaufAnsprechP = CharToXMLChar(oRecord2.getString(23))			&apos;Buyer contact point : Text [0..1]	[BT-56]
		stKaufAnsprechPTel = CharToXMLChar(oRecord2.getString(65))		&apos;Buyer contact telephone number :  Text [0..1]	[BT-57]
		stKaufAnsprechPEMail = CharToXMLChar(oRecord2.getString(66))	&apos;Buyer contact email address : Text [0..1]	[BT-58]
		
		REM Guppe DELIVERY INFORMATION [0..1] [BG-13]
		stLDatum = Join(Split(oRecord2.getString(39),&quot;-&quot;),&quot;&quot;)			&apos;Actual delivery date : Date [0..1]	[BT-72]
		stLFirma = CharToXMLChar(oRecord2.getString(40))				&apos;Deliver to party name : Text [0..1] [BT-70]
		REM Gruppe DELIVERY INFORMATION → DELIVER TO ADDRESS	[0..1] [BG-15] 
		stLStr = oRecord2.getString(41)									&apos;Deliver to address line 1 : Text [0..1] [BT-75]
		stLPlz = oRecord2.getString(42)									&apos;Deliver to post code : Text [1] [BT-78]
		stLStadt = oRecord2.getString(43)								&apos;Deliver to city : Text [1] [BT-77]
		stLLandCode = oRecord2.getString(44)							&apos;Deliver to country code : Code [1] [BT-80]
		stLAddress = stLPlz &amp; stLStadt &amp; stLLandCode					&apos;Nur wenn ein Adresseintrag vorhanden sind soll die Gruppe BG-15 übernommen werden
		stDelivery = stLDatum &amp; stLFirma &amp; stLAddress					&apos;Nur wenn ein Adresseintrag oder Datum oder Firma vorhanden sind soll die Gruppe BG-13 übernommen werden
		REM Gruppe DELIVERY INFORMATION → INVOICING PERIOD [0..1] [BG-14]
		stRStartDate = oRecord2.getString(45)							&apos;Invoicing period start date : Date [0..1] [BT-73]
		stREndDate = oRecord2.getString(46)								&apos;Invoicing period end date : Date [0..1] [BT-74]

		REM Gruppe INVOICE NOTE [0..*] [BG-1]
		stRAnmerkung = CharToXMLChar(oRecord2.getString(53))			&apos;Invoice note : Text [1] [BT-22]

		REM Gruppe PRECEDING INVOICE REFERENCE [0..*] [BG-3]
		stVorRechnungID = oRecord2.getString(51)
		
		REM Gruppe PAYMENT INSTRUCTIONS → DIRECT DEBIT [0..1] [BG-19]
		stGlaeubID = CharToXMLChar(oRecord2.getString(54))				&apos;Bank assigned creditor identifier : Identifier [1] [BT-90]
		stIBANEmpfaenger = CharToXMLChar(oRecord2.getString(55))		&apos;Debited account identifier : Identifier [1] [BT-91]
		stMandateID = CharToXMLChar(oRecord2.getString(56))				&apos;Mandate reference identifier : Identifier [1] [BT-89]
		
		REM Gruppe VAT BREAKDOWN [1..*] [BG-23]		
		stSteuerfreiheit = CharToXMLChar(oRecord2.getString(57))		&apos;VAT exemption reason text : Text [0..1] [BT-120]

		REM Eigene Abfrage-Daten ######################################################################################################################################
		REM ###########################################################################################################################################################

		REM Ermäßigungen und Aufschläge Auf Rechnungsebene
		REM Gruppe DOCUMENT LEVEL ALLOWANCES [0..*] [BG-20] und Gruppe DOCUMENT LEVEL CHARGES [0..*] [BG-21]
		REM	AllowanceChargeReasonCode nach https://www.xrepository.de/details/urn:xoev-de:kosit:codeliste:untdid.5189_3 (für Zulagen, Nachlässe)
		REM	AllowanceChargeReasonCode nach https://www.xrepository.de/details/urn:xoev-de:kosit:codeliste:untdid.7143_4 (für Gebühren)	
		REM Da die Unterscheidungen nicht automatisch gemacht werden können und der Code nicht erforderlich ist fehlt dieser Code in der XRechnung 

		If oRecord2.getLong(69) &gt; 0 Then
			ReDim Preserve arAllowanceChargePercent(inI)	&apos;Document level allowance percentage : Percentage [0..1] [BT-94]; Document level charge percentage : Percentage [0..1] [BT-101]
			ReDim Preserve arAllowanceChargeReason(inI)		&apos;Document level allowance reason : Text [0..1] [BT-97]; Document level charge reason : Text [0..1] [BT-104]
			ReDim Preserve arAllowanceChargeAmount(inI)		&apos;Document level allowance amount : Amount [1] [BT-92]; Document level charge amount : Amount [1] [BT-99]
			ReDim Preserve arAllowanceChargeBaseAmount(inI)	&apos;Document level allowance base amount : Amount [0..1] [BT-93]; Document level charge base amount : Amount [0..1] [BT-100]
			ReDim Preserve arAllowanceChargeTax(inI)		&apos;Document level allowance VAT rate : Percentage [0..1] [BT-96]; Document level charge VAT rate : Percentage [0..1] [BT-103]
			ReDim Preserve arAllowanceChargeIndicator(inI)	&apos;mit false (Nachlass) und true (Zuschlag) wird der Unterschied zwischen den Gruppen sichtbar
			ReDim Preserve arAllowanceChargeTaxID(inI)		&apos;Document level allowance VAT category code : Code [1] [BT-95]; Document level charge VAT category code : Code [1] [BT-102]
			arAllowanceChargePercent(inI)=oRecord2.getLong(69) 		&apos;Rabatt-Satz
			arAllowanceChargeReason(inI)=oRecord2.getString(70) 	&apos;Abzug Grund: Rabatt
			arAllowanceChargeIndicator(inI)=oRecord2.getString(71)	&apos;Indikator: bei Rabatt false
			arAllowanceChargeBaseAmount(inI)=oRecord2.getString(72)	&apos;Rabatt von Betrag
			arAllowanceChargeAmount(inI)=oRecord2.getString(73)		&apos;Rabatt
			arAllowanceChargeTax(inI)=oRecord2.getLong(68)			&apos;MwSt-Satz
			arAllowanceChargeTaxID(inI)=oRecord2.getString(67)		&apos;USt Code ID
			IF arAllowanceChargeIndicator(inI) = &quot;true&quot; Then
				doChargeTotalAmount = doChargeTotalAmount + oRecord2.getDouble(73)
			ELSE
				doAllowanceTotalAmount = doAllowanceTotalAmount + oRecord2.getDouble(73)
			END IF
			inI=inI+1
		End If
		If oRecord2.getLong(74) &gt; 0 Then
			ReDim Preserve arAllowanceChargePercent(inI)	&apos;Document level allowance percentage : Percentage [0..1] [BT-94]; Document level charge percentage : Percentage [0..1] [BT-101]
			ReDim Preserve arAllowanceChargeReason(inI)		&apos;Document level allowance reason : Text [0..1] [BT-97]; Document level charge reason : Text [0..1] [BT-104]
			ReDim Preserve arAllowanceChargeAmount(inI)		&apos;Document level allowance amount : Amount [1] [BT-92]; Document level charge amount : Amount [1] [BT-99]
			ReDim Preserve arAllowanceChargeBaseAmount(inI)	&apos;Document level allowance base amount : Amount [0..1] [BT-93]; Document level charge base amount : Amount [0..1] [BT-100]
			ReDim Preserve arAllowanceChargeTax(inI)		&apos;Document level allowance VAT rate : Percentage [0..1] [BT-96]; Document level charge VAT rate : Percentage [0..1] [BT-103]
			ReDim Preserve arAllowanceChargeIndicator(inI)	&apos;mit false (Nachlass) und true (Zuschlag) wird der Unterschied zwischen den Gruppen sichtbar
			ReDim Preserve arAllowanceChargeTaxID(inI)		&apos;Document level allowance VAT category code : Code [1] [BT-95]; Document level charge VAT category code : Code [1] [BT-102]
			arAllowanceChargePercent(inI)=oRecord2.getLong(74) 		&apos;Korrektur-Satz
			arAllowanceChargeReason(inI)=oRecord2.getString(75) 	&apos;Korrektur Grund: z.B. Lieferaufschlag
			arAllowanceChargeIndicator(inI)=oRecord2.getString(76)	&apos;Indikator: bei Abzug false bei Aufschlag true
			arAllowanceChargeBaseAmount(inI)=oRecord2.getString(77)	&apos;Korrektur von Betrag
			arAllowanceChargeAmount(inI)=oRecord2.getString(78)		&apos;Korrektur
			arAllowanceChargeTax(inI)=oRecord2.getLong(68)			&apos;MwSt-Satz
			arAllowanceChargeTaxID(inI)=oRecord2.getString(67)		&apos;USt Code ID
			IF arAllowanceChargeIndicator(inI) = &quot;true&quot; Then
				doChargeTotalAmount = doChargeTotalAmount + oRecord2.getDouble(78)
			ELSE
				doAllowanceTotalAmount = doAllowanceTotalAmount + oRecord2.getDouble(78)
			END IF
		End If
		
		REM Gruppe VAT BREAKDOWN [1..*] [BG-23]
		REM TAX, ist auch als &quot;tbl_Steuer_Code&quot; der Datenbank beigefügt
		REM ID:
		REM S (Standard rate)			dt: Normaler Steuersatz
		REM Z (Zero rated goods)		dt: nicht besteuerte Waren
		REM E (Exempt from tax)			dt: steuerfrei
		REM AE (VAT Reverse Charge)		dt: Mehrwertsteuer (Umkehrung der Steuerschuldnerschaft)
		REM K (VAT exempt for EEA intra-community supply of goods and services)	dt: Mehrwertsteuerbefreiung für innergemeinschaftliche Lieferungen von Gegenständen und Dienstleistungen im EWR
		REM G (Free export item, tax not charged)	dt: Freier Ausfuhrartikel, keine Steuer
		REM O (Services outside scope of tax)		dt: Dienstleistungen außerhalb des Steuerbereichs
		REM L (Canary Islands general indirect tax)	dt: Allgemeine indirekte Steuer der Kanarischen Inseln
		REM M (Tax for production, services and importation in Ceuta and Melilla)	dt: Steuer auf Produktion, Dienstleistungen und Einfuhren in Ceuta und Melilla

		arTaxID(0) = oRecord2.getString(67)				&apos;VAT category code : Code [1] [BT-118]
		arTaxPercent(0) = oRecord2.getString(68)		&apos;VAT category rate : Percentage [1] [BT-119]
		arTaxNetto(0) = Round2Decimalplaces(oRecord2.getDouble(79))			&apos;VAT category taxable amount : Amount [1] [BT-116]
		arTaxTax(0) = Round2Decimalplaces(oRecord2.getDouble(80))			&apos;VAT category tax amount : Amount [1] [BT-117]
		
		REM SummeTotal
		REM Gruppe DOCUMENT TOTALS [1] [BG-22]	

		stNetto = Round2Decimalplaces(oRecord2.getDouble(79))				&apos;Invoice total amount without VAT : Amount [1] [BT-109]
		stSteuer = Round2Decimalplaces(oRecord2.getDouble(80))				&apos;Invoice total VAT amount : Amount [0..1] [BT-110]
		stBrutto = Round2Decimalplaces(oRecord2.getDouble(81))				&apos;Invoice total amount with VAT : Amount [1] [BT-112]
		stPrepaidAmount = Round2Decimalplaces(oRecord2.getDouble(82))		&apos;Paid amount : Amount [0..1] [BT-113]
		stPayableAmount = Round2Decimalplaces(oRecord2.getDouble(83))		&apos;Amount due for payment : Amount [1] [BT-115]

		stSkontoSatz = oRecord2.getString(84) &amp; 0
		stSkontoTage = oRecord2.getString(85)
		stSkontoBis = oRecord2.getString(86)
		stSkonto = oRecord2.getString(87)
		If oRecord2.getString(88) &lt;&gt; &quot;&quot; Then
			ReDim Preserve arDocRefID(0)
			ReDim Preserve arDocRefDate(0)
			arDocRefID(0) = oRecord2.getString(88)
			arDocRefDate(0) = Join(Split(oRecord2.getString(89),&quot;-&quot;),&quot;&quot;)
		End If
		stFaelligTage = oRecord2.getString(90)
		sXRechnungAbsender=stRStellEMail
		sXRechnungEmpfaenger=stKaufEMail
	Wend
	REM Dummy für die Identifikation, falls BT-29, BT-30 und BT-31 leer sind
	IF stSellerID = &quot;&quot; AND stRStellHRAEintragID = &quot;&quot; AND stRStellUST_IdNr = &quot;&quot; THEN
		stSellerID = stRStellAbwHandelsname
	END IF
	REM Gruppe PAYMENT INSTRUCTIONS [1] [BG-16]
	stPaymentMeansCode = &quot;58&quot;	&apos;Payment means type code : Code [1] [BT-81]
	REM 58: Code, wenn nur IBAN (innerhalb des SEPA-Raumes) erforderlich ist
	REM 30: Code, wenn die BIC (außerhalb des SEPA-Raumes) erforderlich ist
	REM 58: SEPA credit transfer - Credit transfer inside the Single Euro Payment Area (SEPA) system.
	REM 59: SEPA direct debit - Direct debit inside the Single Euro Payment Area (SEPA) system.
	IF stIBANEmpfaenger &lt;&gt; &quot;&quot; THEN stPaymentMeansCode = &quot;59&quot;


	REM Gruppe INVOICE LINE [1..*] [BG-25]
	REM Vorletzter Eintrag ist die Tax-ID, Code siehe unten
	REM UnitCode siehe https://docs.peppol.eu/poacc/billing/3.0/codelist/UNECERec20/
	REM XPP für Stück, DAY für Tage, HUR für Stunden, MON für Monat	
	REM Wenn statt &quot;Rabatt&quot; mit &quot;Zuschlag&quot; gearbeitet werden soll, dann muss hier &quot;&quot;Rabatt&quot;&quot; &gt; 0 statt &quot;&quot;Rabatt&quot;&quot; &lt; 0 gesetzt werden.	

	sSQL3=&quot;SELECT DISTINCT t1.Pos AS arDataID_1,t1.Menge AS arDataQuantity_2,t1.Leistungsbeschreibung AS arDataDescription_3,&quot;&amp;_
		&quot;t1.EP AS arDataPrice_4,&apos;0&apos; AS arDataRabatt_5,&quot;&amp;_
		&quot;(CASE WHEN t1.Pos_TypID=1 THEN t1.GP ELSE 0 END) AS arDataAmount_6,&quot;&amp;_
		&quot;t2.MwSt_Satz AS arDataTax_7,&apos;&quot;&amp; arTaxID(0) &amp;&quot;&apos; AS arDataTaxID_8,t3.Code AS arDataQuantityUnitCode_9,NULL AS arDataStartDate_10,NULL AS arDataEndDate_11,&quot;&amp;_
		&quot;&apos;Main&apos; AS arDataRow_12,t1.Pos_TypID AS iPosTypID_13,NULL AS arDataKonto_14,&quot;&amp;_
		&quot;COALESCE((CASE WHEN LENGTH(t1.Bestellnummer)=0 THEN NULL ELSE t1.Bestellnummer END),(CASE WHEN LENGTH(t1.LeistungsID)=0 THEN NULL ELSE t1.LeistungsID END),t1.Pos) AS arDataSellID_15,&quot;&amp;_
		&quot;NULL AS arDataRabattIndicator_16,(CASE WHEN t1.Pos_TypID=1 OR t1.Pos_TypID=4 THEN t1.Leistungsbezeichnung ELSE TRIM(CONCAT(t4.Pos_Typ,&apos;\n&apos;,t1.Leistungsbezeichnung)) END) AS arDataName_17,&quot;&amp;_
		&quot;t1.Leistung AS arrDataLeistung_18,t1.Lieferung AS arrDataLieferung_19,t1.LeistungsID AS arDocRefID_20,t1.Bestellnummer AS arDocRefDate_21&quot;&amp;_
		&quot; FROM &quot;&amp; sArbeitstabelle &amp;&quot; AS t1 LEFT OUTER JOIN Einheit AS t3 ON t3.Einheit LIKE t1.Einheit,&quot;&amp; sTabelle1 &amp;&quot; AS t2,Pos_Typ AS t4&quot;&amp;_
		&quot; WHERE t2.DocumentID=t1.DocumentID&quot;&amp;_
		&quot; AND t4.Pos_TypID=t1.Pos_TypID&quot;&amp;_
		&quot; ORDER BY Pos ASC&quot;

	oRecord3=oResult_Scroll(sSql3)

	inI = 0
	i = UBOUND(arDocRefID())+1
	doDataAmountTotal = 0
	WHILE oRecord3.Next
		If oRecord3.getInt(13) &lt; 4 Then
			ReDim Preserve arDataID(inI)				&apos;Invoice line identifier : Identifier [1] [BT-126]
			ReDim Preserve arDataQuantity(inI)			&apos;Invoiced quantity : Quantity [1] [BT-129]
			ReDim Preserve arDataDescription(inI)		&apos;Invoice line note : Text [0..1] [BT-127]
			ReDim Preserve arDataName(inI)				&apos;Invoice line object identifier : Identifier [0..1] [BT-128]
			ReDim Preserve arDataAmount(inI)			&apos;Invoice line net amount : Amount [1] [BT-131]
			ReDim Preserve arDataQuantityUnitCode(inI)	&apos;Invoiced quantity unit of measure code : Code [1] [BT-130]
			ReDim Preserve arDataKonto(inI)				&apos;Invoice line Buyer accounting reference : Text [0..1] [BT-133]
			REM Gruppe INVOICE LINE → ITEM INFORMATION  [1] [BG-31]
			ReDim Preserve arDataSellID(inI) 			&apos;Item Sellers identifier : Identifier [0..1] [BT-155]
			REM Gruppe INVOICE LINE → INVOICE LINE ALLOWANCES [0..1] [BG-27]
			ReDim Preserve arDataRabatt(inI)			&apos;Invoice line allowance amount : Amount [1] [BT-136]		
			ReDim Preserve arDataRabattIndicator(inI)
			REM Gruppe INVOICE LINE → INVOICE LINE PERIOD [0..1] [BG-26]	
			ReDim Preserve arDataStartDate(inI)			&apos;Invoice line period start date : Date [0..1] [BT-134]
			ReDim Preserve arDataEndDate(inI)			&apos;Invoice line period end date : Date [0..1] [BT-135]
			REM Gruppe INVOICE LINE → LINE VAT INFORMATION [1] [BG-30]	
			ReDim Preserve arDataTax(inI)				&apos;Invoiced item VAT rate : Percentage [0..1] [BT-152]
			ReDim Preserve arDataTaxID(inI)				&apos;Invoiced item VAT category code : Code [1] [BT-151]
			REM Gruppe INVOICE LINE → PRICE DETAILS [1] [BG-29]
			ReDim Preserve arDataPrice(inI)				&apos;Item net price : Unit Price Amount [1] [BT-146]
			
			ReDim Preserve arDataRow(inI)
			arDataID(inI) = CharToXMLChar(oRecord3.getString(1))
			arDataQuantity(inI) = oRecord3.getString(2)
			arDataDescription(inI) = CharToXMLChar(oRecord3.getString(3))
	&apos;		ar() = Split(arDataDescription(inI),CHR(10))
	&apos;		arDataName(inI) = ar(0)	&apos;Item name : Text [1] [BT-153]
			arDataPrice(inI) = oRecord3.getString(4)
			arDataRabatt(inI) = Round2Decimalplaces(oRecord3.getDouble(5))	&apos;Rabatt wird hier nicht in Prozent sondern als absoluter Betrag ausgegeben; genau 2 Nachkommastellen
			arDataAmount(inI) = Round2Decimalplaces(oRecord3.getDouble(6))	&apos;genau 2 Nachkommastellen
			IF oRecord3.getInt(13) = 1 THEN doDataAmountTotal = doDataAmountTotal + oRecord3.getDouble(6)	&apos;genau 2 Nachkommastellen, nur MainSub 1 darf für den Gesamtbetrag der Rechnung herangezogen werden
			arDataTax(inI) = oRecord3.getString(7)
			arDataTaxID(inI) = oRecord3.getString(8)
			arDataQuantityUnitCode(inI) = oRecord3.getString(9)
			arDataStartDate(inI) = oRecord3.getString(10)
			arDataEndDate(inI) = oRecord3.getString(11)
			arDataRow(inI) = Trim(oRecord3.getString(12))	&apos;Main, MainSub (Übergang zu Sub) …			
			arDataKonto(inI) = CharToXMLChar(oRecord3.getString(14))	&apos;Invoice line Buyer accounting reference : Text [0..1] [BT-133]
			arDataSellID(inI) = CharToXMLChar(oRecord3.getString(15))	&apos;Item Sellers identifier : Identifier [0..1] [BT-155]
			arDataRabattIndicator(inI) = Trim(oRecord3.getString(16))
			arDataName(inI) = oRecord3.getString(17) &apos;Item name : Text [1] [BT-153]
			inI = inI + 1
		Else		&apos; hier kommmen die AZ&apos;s
&apos;Hier die AZ&apos;s angeben
	REM Gruppe PRECEDING INVOICE REFERENCE [0..*] [BG-3]
			If stZahlungNotiz &lt;&gt; &quot;&quot; Then 
				stZahlungNotiz = stZahlungNotiz &amp; Chr$(13)
			Else
				stZahlungNotiz = &quot;Vorhergehende Rechnungen zu dieser Rechnung: &quot; &amp; Chr$(13)
			End If
		
			ReDim Preserve arDocRefID(i)
			ReDim Preserve arDocRefDate(i)
			
			sAZ_Text=oRecord3.getString(17) &amp; &quot; ohne MwSt: &quot; &amp; oRecord3.getString(4) &amp; &quot; MwSt: &quot; &amp; oRecord3.getString(18) &amp;_
				&quot; MwSt-Satz: &quot; &amp; oRecord3.getString(19) &amp; &quot;% mit MwSt: &quot; &amp; oRecord3.getString(6)
			stZahlungNotiz = stZahlungNotiz &amp; CharToXMLChar(sAZ_Text)				&apos;Payment terms:	Text [0..1]	[BT-20]
			arDocRefID(i) = &quot;AZ &quot;&amp; oRecord3.getString(20)							&apos;Preceding Invoice reference : Document Reference [1] [BT-25]
			arDocRefDate(i) = Join(Split(oRecord3.getString(21),&quot;-&quot;),&quot;&quot;)								&apos;Preceding Invoice issue date : Date [1..*] [BT-26]
			i = i + 1
		End If
	Wend
	
	REM Gruppe DOCUMENT TOTALS [1] [BG-22] (Kontrollwert aus den Einzelzeilen)
	stDataAmountTotal = Round2Decimalplaces(doDataAmountTotal)	&apos;Sum of Invoice line net amount : Amount [1] [BT-106]

	If stZahlungNotiz &lt;&gt; &quot;&quot; then
		stZahlungNotiz = stZahlungNotiz &amp; Chr$(13) &amp; Chr$(13)
	End if
	If CDbl(stSkontoSatz) &gt; 0 Then
		stZahlungNotiz = stZahlungNotiz &amp; &quot;Zahlbar bis zum &quot;&amp; stSkontoBis &amp;&quot; mit &quot;&amp; fZahlMitPunkt(stSkontoSatz) &amp;_
			&quot;% Skonto aus &quot;&amp; fTausenderpunkt(fZahlMitPunkt(stPayableAmount)) &amp;&quot; &quot;&amp; sWaehrung &amp;&quot; = &quot;&amp; fTausenderpunkt(fZahlMitPunkt(stSkonto)) &amp;&quot; &quot;&amp; sWaehrung &amp; Chr$(13) &amp;_
			&quot;sonst bis &quot;&amp; fConvDatum(stRZahlungBisDatum) &amp;&quot; ohne Abzug&quot; &amp; Chr$(13)
		stZahlungNotiz = stZahlungNotiz &amp; Chr$(13) &amp; &quot;#SKONTO#TAGE=&quot; &amp; stSkontoTage &amp; &quot;#PROZENT=&quot; &amp; stSkontoSatz &amp; &quot;#BASISBETRAG=&quot; &amp; stPayableAmount &amp; &quot;#&quot;
		stZahlungNotiz = stZahlungNotiz &amp; Chr$(13) &amp; &quot;#SKONTO#TAGE=&quot; &amp; stFaelligTage &amp; &quot;#PROZENT=0.00#BASISBETRAG=&quot; &amp; stPayableAmount &amp; &quot;#&quot;
	Else
		stZahlungNotiz = stZahlungNotiz &amp; &quot;Zahlbar bis zum &quot;&amp; fConvDatum(stRZahlungBisDatum) &amp;&quot; ohne Abzug&quot; &amp; Chr$(13)
		stZahlungNotiz = stZahlungNotiz &amp; Chr$(13) &amp; &quot;#SKONTO#TAGE=&quot; &amp; stFaelligTage &amp; &quot;#PROZENT=0.00#BASISBETRAG=&quot; &amp; stPayableAmount &amp; &quot;#&quot;
	End If

	REM Gruppe DOCUMENT TOTALS [1] [BG-22] (Kontrollwert aus den Einzelzeilen)
	stAllowanceTotalAmount = Round2Decimalplaces(doAllowanceTotalAmount) &apos;genau 2 Nachkommastellen; Sum of allowances on document level : Amount [0..1] [BT-107]
	stChargeTotalAmount = Round2Decimalplaces(doChargeTotalAmount) &apos;genau 2 Nachkommastellen; Sum of charges on document level : Amount [0..1] [BT-108]

	inAttach = 0

	REM Weiter Variablen, die auf jeden Fall gesetzt werden müssen, aber (bisher) nicht von der Datenbank befüllt werden
	
	REM Gruppe SELLER → SELLER POSTAL ADDRESS	[1]	[BG-5]
	stCountryIdentificationCode = &quot;DE&quot;	&apos;Seller country code : Code [1] [BT-40]
	REM Als Code für das Land, aus dem die Rechnung kommt

	REM Tabulatoreinsprung als Anzahl an Leerzeichen festlegen
	inTab = 3
	
REM +++ Ab hier wird das Dokument zusammengestellt +++
	
	oUcb = createUnoService(&quot;com.sun.star.ucb.SimpleFileAccess&quot;)
	oOutputStream = createUnoService(&quot;com.sun.star.io.TextOutputStream&quot;)
	stFileUrl = stXRechnungPath
	IF oUcb.exists(stFileUrl) THEN
		oUcb.kill(stFileUrl)
	END IF
	oFile = oUcb.OpenFileReadWrite(stFileUrl)
	oOutputStream.SetOutputStream(oFile.getOutputStream)
	REM https://docs.oasis-open.org/ubl (Universal Business Language)
	REM https://docs.oasis-open.org/ubl/UBL-2.4.html vom 26.07.2023
	REM Übersicht der Einträge: https://docs.peppol.eu/poacc/billing/3.0/syntax/ubl-invoice/tree/
	REM Neben UBL ist noch das Format UN/CEFACT Cross Industry Invoice XML message as specified in XML Schemas 16B (SCRDM - CII) möglich.
	REM Der Sender muss eines dieser Formate einhalten. Der Empfänger muss beide Formate lesen können.
	REM In dem folgenden Code sind die jeweiligen Zeilen als erforderlich oder nicht erforderlich gekennzeichnet. 
	REM 1…1 bedeutet: 1 von 1 muss vorhanden sein
	REM 0…1 bedeutet: 0 von maximal 1 darf vorhanden sein
	REM 0…n bedeutet: 0 von belibig vielen darf vorhanden sein
	stString = &quot;&lt;?xml version=&quot;&quot;1.0&quot;&quot; encoding=&quot;&quot;UTF-8&quot;&quot;?&gt;&quot; &amp; CHR(13) &amp; _
		&quot;&lt;rsm:CrossIndustryInvoice xmlns:rsm=&quot;&quot;urn:un:unece:uncefact:data:standard:CrossIndustryInvoice:100&quot;&quot;&quot; &amp; CHR(13) &amp; _
		Space(2 * inTab) &amp; &quot;xmlns:qdt=&quot;&quot;urn:un:unece:uncefact:data:standard:QualifiedDataType:100&quot;&quot;&quot; &amp; CHR(13) &amp; _
		Space(2 * inTab) &amp; &quot;xmlns:ram=&quot;&quot;urn:un:unece:uncefact:data:standard:ReusableAggregateBusinessInformationEntity:100&quot;&quot;&quot; &amp; CHR(13) &amp; _
        Space(2 * inTab) &amp; &quot;xmlns:xs=&quot;&quot;http://www.w3.org/2001/XMLSchema&quot;&quot;&quot; &amp; CHR(13) &amp; _
        Space(2 * inTab) &amp; &quot;xmlns:udt=&quot;&quot;urn:un:unece:uncefact:data:standard:UnqualifiedDataType:100&quot;&quot;&gt;&quot; &amp; CHR(13) &amp; _
		Space(1 * inTab) &amp; &quot;&lt;rsm:ExchangedDocumentContext&gt;&quot; &amp; CHR(13) &amp; _
		Space(2 * inTab) &amp; &quot;&lt;ram:BusinessProcessSpecifiedDocumentContextParameter&gt;&quot; &amp; CHR(13) &amp; _
		Space(3 * inTab) &amp; &quot;&lt;ram:ID&gt;urn:fdc:peppol.eu:2017:poacc:billing:01:1.0&lt;/ram:ID&gt;&quot; &amp; CHR(13) &amp; _
    	Space(2 * inTab) &amp; &quot;&lt;/ram:BusinessProcessSpecifiedDocumentContextParameter&gt;&quot; &amp; CHR(13) &amp; _
		Space(2 * inTab) &amp; &quot;&lt;ram:GuidelineSpecifiedDocumentContextParameter&gt;&quot; &amp; CHR(13) &amp; _
		Space(3 * inTab) &amp; &quot;&lt;ram:ID&gt;urn:cen.eu:en16931:2017#compliant#urn:xeinkauf.de:kosit:xrechnung_3.0&lt;/ram:ID&gt;&quot; &amp; CHR(13) &amp; _
    	Space(2 * inTab) &amp; &quot;&lt;/ram:GuidelineSpecifiedDocumentContextParameter&gt;&quot; &amp; CHR(13) &amp; _
		Space(1 * inTab) &amp; &quot;&lt;/rsm:ExchangedDocumentContext&gt;&quot; &amp; CHR(13) &amp; _
		Space(1 * inTab) &amp; &quot;&lt;rsm:ExchangedDocument&gt;&quot; &amp; CHR(13)
	REM Einzelwerte aus der Datenbank
	REM ID → Rechnungsnummer, muss eindeutig sein, IssueDate → Rechnungsdatum (Ausstellungsdatum), DueDate → Fälligkeitsdatum des Rechnungsbetrages.
    stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:ID&gt;&quot; &amp; stRNummer &amp; &quot;&lt;/ram:ID&gt;&quot; &amp; CHR(13)					&apos;erforderlich 1…1
    stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:TypeCode&gt;&quot; &amp; stInvoiceTypeCode &amp; &quot;&lt;/ram:TypeCode&gt;&quot; &amp; CHR(13)					&apos;erforderlich 1…1    
	stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:IssueDateTime&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;udt:DateTimeString format=&quot;&quot;102&quot;&quot;&gt;&quot; &amp; stRDatum &amp; &quot;&lt;/udt:DateTimeString&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1
	stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;/ram:IssueDateTime&gt;&quot; &amp; CHR(13)
	IF stRAnmerkung &lt;&gt; &quot;&quot; THEN					&apos;nicht erforderlich 0…1    
		stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:IncludedNote&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:Content&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1, wenn Included Note vorhanden [BT-22]
		stString = stString &amp; Trim(stRAnmerkung)
		stString = stString &amp; Space(3 * inTab) &amp;&quot;&lt;/ram:Content&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;/ram:IncludedNote&gt;&quot; &amp; CHR(13)
	END IF
	stString = stString &amp; Space(1 * inTab) &amp; &quot;&lt;/rsm:ExchangedDocument&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(1 * inTab) &amp; &quot;&lt;rsm:SupplyChainTradeTransaction&gt;&quot; &amp; CHR(13)
	REM Hier folgen die Rechnungszeilen. Bei Cross Industry Invoice sind keine Untergliederung in SubInvoiceLine möglich 
	
	
	REM Schleife für die einzelnen Einträge in der Rechnung (Rechnungszeile), Lieferkosten können hier ebenfalls erscheinen.
	REM Lieferkosten wären auch über einen separaten Eintrag für die Gesamtrechnung möglich
	FOR i = 0 TO UBOUND(arDataID())
		IF arDataRow(i) = &quot;Main&quot; OR arDataRow(i) = &quot;MainToSub&quot; THEN	&apos;Nur die Hauptrechnungszeile ohne XRechnung-Extension wird abgerufen
			stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:IncludedSupplyChainTradeLineItem&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…n
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:AssociatedDocumentLineDocument&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:LineID&gt;&quot; &amp; arDataID(i) &amp; &quot;&lt;/ram:LineID&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:AssociatedDocumentLineDocument&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:SpecifiedTradeProduct&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:SellerAssignedID&gt;&quot; &amp; arDataSellID(i) &amp; &quot;&lt;/ram:SellerAssignedID&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:Name&gt;&quot; &amp; arDataName(i) &amp; &quot;&lt;/ram:Name&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1
			If arDataDescription(i) &lt;&gt; &quot;&quot; Then
				stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:Description&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1
				stString = stString &amp; Trim(arDataDescription(i)) &amp; CHR(13)	&apos;erforderlich 1…1
				stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:Description&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1
			End if
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:SpecifiedTradeProduct&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:SpecifiedLineTradeAgreement&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:NetPriceProductTradePrice&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:ChargeAmount&gt;&quot; &amp; arDataPrice(i) &amp; &quot;&lt;/ram:ChargeAmount&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:NetPriceProductTradePrice&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:SpecifiedLineTradeAgreement&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:SpecifiedLineTradeDelivery&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:BilledQuantity unitCode=&quot;&quot;&quot; &amp; arDataQuantityUnitCode(i) &amp; &quot;&quot;&quot;&gt;&quot; &amp; arDataQuantity(i) &amp; &quot;&lt;/ram:BilledQuantity&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:SpecifiedLineTradeDelivery&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:SpecifiedLineTradeSettlement&gt;&quot; &amp; CHR(13)			
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:ApplicableTradeTax&gt;&quot; &amp; CHR(13)			
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:TypeCode&gt;VAT&lt;/ram:TypeCode&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1; VAT: Value Added Tax → Mehrwertsteuer (Defaultwert)	
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:CategoryCode&gt;&quot; &amp; arDataTaxID(i) &amp; &quot;&lt;/ram:CategoryCode&gt;&quot; &amp; CHR(13) &apos;erforderlich 1…1		
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:RateApplicablePercent&gt;&quot; &amp; arDataTax(i) &amp; &quot;&lt;/ram:RateApplicablePercent&gt;&quot; &amp; CHR(13)  &apos;nicht erforderlich 0…1; Angabe in Prozent*100, lässt sich aus dem Code von TaxCategory schließen
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:ApplicableTradeTax&gt;&quot; &amp; CHR(13)
			IF Val(arDataRabatt(i)) &gt; 0 THEN &apos;nicht erforderlich 0…1
				stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:SpecifiedTradeAllowanceCharge&gt;&quot; &amp; CHR(13)
				stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:ChargeIndicator&gt;&quot; &amp; CHR(13)
				stString = stString &amp; Space(6 * inTab) &amp; &quot;&lt;udt:Indicator&gt;&quot; &amp; arDataRabattIndicator(i) &amp; &quot;&lt;/udt:Indicator&gt;&quot; &amp; CHR(13)
				stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;/ram:ChargeIndicator&gt;&quot; &amp; CHR(13)
				stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:ActualAmount&gt;&quot; &amp; arDataRabatt(i) &amp; &quot;&lt;/ram:ActualAmount&gt;&quot; &amp; CHR(13)
				stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:Reason&gt;Rabatt&lt;/ram:Reason&gt;&quot; &amp; CHR(13)	&apos;Erforderlich, wenn AllowanceCharge
				stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:SpecifiedTradeAllowanceCharge&gt;&quot; &amp; CHR(13)
			END IF
			IF arDataStartDate(i) &lt;&gt; &quot;&quot; THEN &apos;nicht erforderlich 0…1
				stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:BillingSpecifiedPeriod&gt;&quot; &amp; CHR(13)
				stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:StartDateTime&gt;&quot; &amp; CHR(13)
				stString = stString &amp; Space(6 * inTab) &amp; &quot;&lt;udt:DateTimeString format=&quot;&quot;102&quot;&quot;&gt;&quot; &amp; arDataStartDate(i) &amp; &quot;&lt;/udt:DateTimeString&gt;&quot; &amp; CHR(13)
				stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;/ram:StartDateTime&gt;&quot; &amp; CHR(13)
				stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:EndDateTime&gt;&quot; &amp; CHR(13)
				stString = stString &amp; Space(6 * inTab) &amp; &quot;&lt;udt:DateTimeString format=&quot;&quot;102&quot;&quot;&gt;&quot; &amp; arDataEndDate(i) &amp; &quot;&lt;/udt:DateTimeString&gt;&quot; &amp; CHR(13)
				stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;/ram:EndDateTime&gt;&quot; &amp; CHR(13)
				stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:BillingSpecifiedPeriod&gt;&quot; &amp; CHR(13)
			END IF
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:SpecifiedTradeSettlementLineMonetarySummation&gt;&quot; &amp; CHR(13)	
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:LineTotalAmount&gt;&quot; &amp; arDataAmount(i) &amp; &quot;&lt;/ram:LineTotalAmount&gt;&quot; &amp; CHR(13) &apos;erforderlich 1…1
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:SpecifiedTradeSettlementLineMonetarySummation&gt;&quot; &amp; CHR(13)
			IF arDataKonto(i) &lt;&gt; &quot;&quot; THEN &apos;nicht erforderlich 0…1
				stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:ReceivableSpecifiedTradeAccountingAccount&gt;&quot; &amp; CHR(13)	
				stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:ID&gt;&quot; &amp; arDataKonto(i) &amp; &quot;&lt;/ram:ID&gt;&quot; &amp; CHR(13)	&apos;[BT-133]
				stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:ReceivableSpecifiedTradeAccountingAccount&gt;&quot; &amp; CHR(13)
			END IF
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:SpecifiedLineTradeSettlement&gt;&quot; &amp; CHR(13)		
			stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;/ram:IncludedSupplyChainTradeLineItem&gt;&quot; &amp; CHR(13)
		END IF
    NEXT
    
	stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:ApplicableHeaderTradeAgreement&gt;&quot; &amp; CHR(13)
    REM Die Leitweg-ID eines Rechnungsempfängers wird in der Regel im konkreten Auftrag an den Rechnungssteller bzw. Rechnungssender übermittelt.?
    REM Alternativ zur BuyerReference kann eine &quot;Purchase order reference&quot; (Unterverzeichnis OrderReference → ID) genutzt werden.
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:BuyerReference&gt;&quot; &amp; stRKaufRef &amp; &quot;&lt;/ram:BuyerReference&gt;&quot; &amp; CHR(13) &apos;erforderlich 1…1	[BT-10]
	
	REM SellerParty - Verkäufer, hier der Rechnungssteller	
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:SellerTradeParty&gt;&quot; &amp; CHR(13)		
	IF stSellerID &lt;&gt; &quot;&quot; THEN 
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:GlobalID&quot;
		IF stSellerICDCode &lt;&gt; &quot;&quot; THEN stString = stString &amp; &quot; schemeID=&quot;&quot;&quot; &amp; stSellerICDCode &amp; &quot;&quot;&quot;&quot;
		stString = stString &amp; &quot;&gt;&quot; &amp; stSellerID &amp; &quot;&lt;/ram:GlobalID&gt;&quot; &amp; CHR(13) &apos;[BT-29]
	END IF
	Rem Handelsregistereinträge	
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:Name&gt;&quot; &amp; stRStellAbwHandelsname &amp; &quot;&lt;/ram:Name&gt;&quot; &amp; CHR(13)	
	IF stRStellHRAEintragForm &lt;&gt; &quot;&quot; THEN 
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:Description&gt;&quot; &amp; stRStellHRAEintragForm &amp; &quot;&lt;/ram:Description&gt;&quot; &amp; CHR(13)
	END IF
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:SpecifiedLegalOrganization&gt;&quot; &amp; CHR(13)
	IF stRStellHRAEintragID &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:ID&gt;&quot; &amp; stRStellHRAEintragID &amp; &quot;&lt;/ram:ID&gt;&quot; &amp; CHR(13)
	END IF
	
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:TradingBusinessName&gt;&quot; &amp; stRStellFirma &amp; &quot;&lt;/ram:TradingBusinessName&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:SpecifiedLegalOrganization&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:DefinedTradeContact&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:PersonName&gt;&quot; &amp; stRStellKonName &amp; &quot;&lt;/ram:PersonName&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:TelephoneUniversalCommunication&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(6 * inTab) &amp; &quot;&lt;ram:CompleteNumber&gt;&quot; &amp; stRStellKonTel &amp; &quot;&lt;/ram:CompleteNumber&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;/ram:TelephoneUniversalCommunication&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:EmailURIUniversalCommunication&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(6 * inTab) &amp; &quot;&lt;ram:URIID&gt;&quot; &amp; stRStellEMail &amp; &quot;&lt;/ram:URIID&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;/ram:EmailURIUniversalCommunication&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:DefinedTradeContact&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:PostalTradeAddress&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:PostcodeCode&gt;&quot; &amp; stRStellPlz &amp; &quot;&lt;/ram:PostcodeCode&gt;&quot; &amp; CHR(13)
	IF stRStellStr &lt;&gt; &quot;&quot; THEN stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:LineOne&gt;&quot; &amp; stRStellStr &amp; &quot;&lt;/ram:LineOne&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:CityName&gt;&quot; &amp; stRStellStadt &amp; &quot;&lt;/ram:CityName&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:CountryID&gt;&quot; &amp; stCountryIdentificationCode &amp; &quot;&lt;/ram:CountryID&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:PostalTradeAddress&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:URIUniversalCommunication&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:URIID schemeID=&quot;&quot;EM&quot;&quot;&gt;&quot; &amp; stRStellKonEMail &amp; &quot;&lt;/ram:URIID&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:URIUniversalCommunication&gt;&quot; &amp; CHR(13)
	IF stRStellUST_IdNr &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:SpecifiedTaxRegistration&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:ID schemeID=&quot;&quot;VA&quot;&quot;&gt;&quot; &amp; stRStellUST_IdNr &amp; &quot;&lt;/ram:ID&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:SpecifiedTaxRegistration&gt;&quot; &amp; CHR(13)
	END IF
	IF stRStellSteuerNr &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:SpecifiedTaxRegistration&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:ID schemeID=&quot;&quot;FC&quot;&quot;&gt;&quot; &amp; stRStellSteuerNr &amp; &quot;&lt;/ram:ID&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:SpecifiedTaxRegistration&gt;&quot; &amp; CHR(13)
	END IF
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:SellerTradeParty&gt;&quot; &amp; CHR(13)
	
	REM BuyerTradeParty - Käufer
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:BuyerTradeParty&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:ID&gt;&quot; &amp; stKaufID &amp; &quot;&lt;/ram:ID&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:Name&gt;&quot; &amp; stKaufName &amp; &quot;&lt;/ram:Name&gt;&quot; &amp; CHR(13)
	IF stKaufCompID &lt;&gt; &quot;&quot; THEN	
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:SpecifiedLegalOrganization&gt;&quot; &amp; CHR(13)
    	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:ID&gt;&quot;+stKaufCompID+&quot;&lt;/ram:ID&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:SpecifiedLegalOrganization&gt;&quot; &amp; CHR(13)
    END IF    
    REM Ansprechpartner Empfänger, nicht erforderlich
    IF stKaufAnsprechP &lt;&gt; &quot;&quot; OR stKaufAnsprechPTel &lt;&gt; &quot;&quot; OR stKaufAnsprechPEMail &lt;&gt; &quot;&quot; THEN    	
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:DefinedTradeContact&gt;&quot; &amp; CHR(13)
		IF stKaufAnsprechP &lt;&gt; &quot;&quot; THEN stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:PersonName&gt;&quot; &amp; stKaufAnsprechP &amp; &quot;&lt;/ram:PersonName&gt;&quot; &amp; CHR(13)
		IF stKaufAnsprechPTel &lt;&gt; &quot;&quot; THEN
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:TelephoneUniversalCommunication&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(6 * inTab) &amp; &quot;&lt;ram:CompleteNumber&gt;&quot; &amp; stKaufAnsprechPTel &amp; &quot;&lt;/ram:CompleteNumber&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;/ram:TelephoneUniversalCommunication&gt;&quot; &amp; CHR(13)
		END IF
		IF stKaufAnsprechPEMail &lt;&gt; &quot;&quot; THEN
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:EmailURIUniversalCommunication&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(6 * inTab) &amp; &quot;&lt;ram:URIID&gt;&quot; &amp; stKaufAnsprechPEMail &amp; &quot;&lt;/ram:URIID&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;/ram:EmailURIUniversalCommunication&gt;&quot; &amp; CHR(13)
		END IF
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:DefinedTradeContact&gt;&quot; &amp; CHR(13)
    END IF
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:PostalTradeAddress&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:PostcodeCode&gt;&quot; &amp; stKaufPlz &amp; &quot;&lt;/ram:PostcodeCode&gt;&quot; &amp; CHR(13)
	IF stKaufStr &lt;&gt; &quot;&quot; THEN stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:LineOne&gt;&quot; &amp; stKaufStr &amp; &quot;&lt;/ram:LineOne&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:CityName&gt;&quot; &amp; stKaufStadt &amp; &quot;&lt;/ram:CityName&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:CountryID&gt;&quot; &amp; stKaufLandCode &amp; &quot;&lt;/ram:CountryID&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:PostalTradeAddress&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:URIUniversalCommunication&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:URIID schemeID=&quot;&quot;EM&quot;&quot;&gt;&quot; &amp; stKaufEMail &amp; &quot;&lt;/ram:URIID&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:URIUniversalCommunication&gt;&quot; &amp; CHR(13)	
	IF stKaufUST_IdNr &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:SpecifiedTaxRegistration&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:ID schemeID=&quot;&quot;VA&quot;&quot;&gt;&quot; &amp; stKaufUST_IdNr &amp; &quot;&lt;/ram:ID&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:SpecifiedTaxRegistration&gt;&quot; &amp; CHR(13)
	END IF
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:BuyerTradeParty&gt;&quot; &amp; CHR(13)
	REM Referenzen, Reihenfolge so erforderlich
	IF stSalesID &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:SellerOrderReferencedDocument&gt;&quot; &amp; CHR(13)
    	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:IssuerAssignedID&gt;&quot;+stSalesID+&quot;&lt;/ram:IssuerAssignedID&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1	[BT-14]
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:SellerOrderReferencedDocument&gt;&quot; &amp; CHR(13)
	END IF
	IF stPurchaseID &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:BuyerOrderReferencedDocument&gt;&quot; &amp; CHR(13)
    	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:IssuerAssignedID&gt;&quot;+stPurchaseID+&quot;&lt;/ram:IssuerAssignedID&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1	[BT-13]
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:BuyerOrderReferencedDocument&gt;&quot; &amp; CHR(13)
	END IF
	IF stContractID &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:ContractReferencedDocument&gt;&quot; &amp; CHR(13)
    	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:IssuerAssignedID&gt;&quot;+stContractID+&quot;&lt;/ram:IssuerAssignedID&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1	[BT-12]
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:ContractReferencedDocument&gt;&quot; &amp; CHR(13)
	END IF
	
    REM Eingebettete Dokumente (statt Anhängen) in Base64-Code
    IF inAttach &gt; 0 THEN
    	FOR i = 0 TO UBOUND(arAttachFilename())
    		stString = stString &amp; Space(1 * inTab) &amp; &quot;&lt;ram:AdditionalReferencedDocument&gt;&quot; &amp; CHR(13)				&apos;nicht erforderlich 0…n
    		stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:IssuerAssignedID&gt;&quot;+arAttachFilename(i)+&quot;&lt;/ram:IssuerAssignedID&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1
    		stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:TypeCode&gt;916&lt;/ram:TypeCode&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1
    		stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:Name&gt;&quot;+arAttachDescription(i)+&quot;&lt;/ram:Name&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1
    		REM Der Anhang kann entweder als Base64-Dokument eingebunden werden oder zusammen mit der Rechnung zugestellt werden.
    		stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:AttachmentBinaryObject mimeCode=&quot;&quot;&quot;+arAttachMimeCode(i)+&quot;&quot;&quot; filename=&quot;&quot;&quot;+arAttachFilename(i)+&quot;&quot;&quot;&gt;&quot;+arAttachFile(i)+&quot;&lt;/ram:AttachmentBinaryObject&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1
    		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:AdditionalReferencedDocument&gt;&quot; &amp; CHR(13)
		NEXT
  	END IF
	
	IF stTenderID &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:AdditionalReferencedDocument&gt;&quot; &amp; CHR(13)
    	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:IssuerAssignedID&gt;&quot;+stTenderID+&quot;&lt;/ram:IssuerAssignedID&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1	[BT-17]
    	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:TypeCode&gt;50&lt;/ram:TypeCode&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:AdditionalReferencedDocument&gt;&quot; &amp; CHR(13)
	END IF	
	IF stObjectID &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:AdditionalReferencedDocument&gt;&quot; &amp; CHR(13)
    	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:IssuerAssignedID&gt;&quot;+stObjectID+&quot;&lt;/ram:IssuerAssignedID&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1	[BT-18]
    	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:TypeCode&gt;130&lt;/ram:TypeCode&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:AdditionalReferencedDocument&gt;&quot; &amp; CHR(13)
	END IF	
	IF stProjectID &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:SpecifiedProcuringProject&gt;&quot; &amp; CHR(13)	&apos;Wie bei XRechnung selbst ganz nach hinten gesetzt
    	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:ID&gt;&quot;+stProjectID+&quot;&lt;/ram:ID&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1	[BT-11]
    	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:Name&gt;Project reference&lt;/ram:Name&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:SpecifiedProcuringProject&gt;&quot; &amp; CHR(13)
	END IF
	
	stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;/ram:ApplicableHeaderTradeAgreement&gt;&quot; &amp; CHR(13)
	
	IF stDelivery &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:ApplicableHeaderTradeDelivery&gt;&quot; &amp; CHR(13)
		IF stLAddress &lt;&gt; &quot;&quot; THEN	&apos; Muss als erter Eintrag in ApplicableHeaderTradeDelivery stehen
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:ShipToTradeParty&gt;&quot; &amp; CHR(13)
    		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:Name&gt;&quot;+stLFirma+&quot;&lt;/ram:Name&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:PostalTradeAddress&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:PostcodeCode&gt;&quot; &amp; stLPlz &amp; &quot;&lt;/ram:PostcodeCode&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1, wenn Adresse angegeben
			IF stLStr &lt;&gt; &quot;&quot; THEN stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:LineOne&gt;&quot; &amp; stLStr &amp; &quot;&lt;/ram:LineOne&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:CityName&gt;&quot; &amp; stLStadt &amp; &quot;&lt;/ram:CityName&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1, wenn Adresse angegeben
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:CountryID&gt;&quot; &amp; stLLandCode &amp; &quot;&lt;/ram:CountryID&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1, wenn Adresse angegeben
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:PostalTradeAddress&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:ShipToTradeParty&gt;&quot; &amp; CHR(13)
		END IF
		IF stLDatum &lt;&gt; &quot;&quot; THEN
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:ActualDeliverySupplyChainEvent&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:OccurrenceDateTime&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;udt:DateTimeString format=&quot;&quot;102&quot;&quot;&gt;&quot; &amp; stLDatum &amp; &quot;&lt;/udt:DateTimeString&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:OccurrenceDateTime&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:ActualDeliverySupplyChainEvent&gt;&quot; &amp; CHR(13)
		END IF
		stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;/ram:ApplicableHeaderTradeDelivery&gt;&quot; &amp; CHR(13)
	ELSE	
		stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:ApplicableHeaderTradeDelivery/&gt;&quot; &amp; CHR(13)
	END IF
		
	stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;ram:ApplicableHeaderTradeSettlement&gt;&quot; &amp; CHR(13)
	IF stIBANEmpfaenger &lt;&gt; &quot;&quot; AND stMandateID &lt;&gt; &quot;&quot; AND stGlaeubID &lt;&gt; &quot;&quot; THEN stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:CreditorReferenceID&gt;&quot; &amp; stGlaeubID &amp; &quot;&lt;/ram:CreditorReferenceID&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:InvoiceCurrencyCode&gt;&quot; &amp; stDocumentCurrencyCode &amp; &quot;&lt;/ram:InvoiceCurrencyCode&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:SpecifiedTradeSettlementPaymentMeans&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:TypeCode&gt;&quot; &amp; stPaymentMeansCode &amp; &quot;&lt;/ram:TypeCode&gt;&quot; &amp; CHR(13)
	IF stIBANEmpfaenger = &quot;&quot; OR stMandateID = &quot;&quot; OR stGlaeubID = &quot;&quot; THEN
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:PayeePartyCreditorFinancialAccount&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:IBANID&gt;&quot; &amp; stZahlungIBAN &amp; &quot;&lt;/ram:IBANID&gt;&quot; &amp; CHR(13)	
		stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:AccountName&gt;&quot; &amp; stZahlungEmpfaenger &amp; &quot;&lt;/ram:AccountName&gt;&quot; &amp; CHR(13)	
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:PayeePartyCreditorFinancialAccount&gt;&quot; &amp; CHR(13)
		IF stPaymentMeansCode = &quot;30&quot; OR stZahlungBIC &lt;&gt; &quot;&quot; THEN		
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:PayeeSpecifiedCreditorFinancialInstitution&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:BICID&gt;&quot; &amp; stZahlungBIC &amp; &quot;&lt;/ram:BICID&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:PayeeSpecifiedCreditorFinancialInstitution&gt;&quot; &amp; CHR(13)
		END IF
	ELSE
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:PayerPartyDebtorFinancialAccount&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:IBANID&gt;&quot; &amp; stIBANEmpfaenger &amp; &quot;&lt;/ram:IBANID&gt;&quot; &amp; CHR(13)		
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:PayerPartyDebtorFinancialAccount&gt;&quot; &amp; CHR(13)
	END IF	
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:SpecifiedTradeSettlementPaymentMeans&gt;&quot; &amp; CHR(13)
	FOR i = 0 TO UBOUND(arTaxPercent())
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:ApplicableTradeTax&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:CalculatedAmount&gt;&quot; &amp; arTaxTax(i) &amp; &quot;&lt;/ram:CalculatedAmount&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:TypeCode&gt;VAT&lt;/ram:TypeCode&gt;&quot; &amp; CHR(13)
		IF stSteuerfreiheit &lt;&gt; &quot;&quot; THEN 
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:ExemptionReason&gt;&quot; &amp; stSteuerfreiheit &amp; &quot;&lt;/ram:ExemptionReason&gt;&quot; &amp; CHR(13)
		END IF
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:BasisAmount&gt;&quot; &amp; arTaxNetto(i) &amp; &quot;&lt;/ram:BasisAmount&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:CategoryCode&gt;&quot; &amp; arTaxID(i) &amp; &quot;&lt;/ram:CategoryCode&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:RateApplicablePercent&gt;&quot; &amp; arTaxPercent(i) &amp; &quot;&lt;/ram:RateApplicablePercent&gt;&quot; &amp; CHR(13)	
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:ApplicableTradeTax&gt;&quot; &amp; CHR(13)
	NEXT	
	IF stRStartDate &lt;&gt; &quot;&quot; OR stREndDate &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:BillingSpecifiedPeriod&gt;&quot; &amp; CHR(13)
		IF stRStartDate &lt;&gt; &quot;&quot; THEN 
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:StartDateTime&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;udt:DateTimeString format=&quot;&quot;102&quot;&quot;&gt;&quot; &amp; stRStartDate &amp; &quot;&lt;/udt:DateTimeString&gt;&quot; &amp; CHR(13) &apos;erforderlich 1…1, wenn SpecifiedTradePaymentTerms vorhanden ist	
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:StartDateTime&gt;&quot; &amp; CHR(13)
		END IF
		IF stREndDate &lt;&gt; &quot;&quot; THEN 
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:EndDateTime&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;udt:DateTimeString format=&quot;&quot;102&quot;&quot;&gt;&quot; &amp; stREndDate &amp; &quot;&lt;/udt:DateTimeString&gt;&quot; &amp; CHR(13) &apos;erforderlich 1…1, wenn SpecifiedTradePaymentTerms vorhanden ist	
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:EndDateTime&gt;&quot; &amp; CHR(13)
		END IF		
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:BillingSpecifiedPeriod&gt;&quot; &amp; CHR(13)
	END IF
	FOR i = 0 TO UBOUND(arAllowanceChargeAmount()) &apos;nicht erforderlich 0…1
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:SpecifiedTradeAllowanceCharge&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:ChargeIndicator&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;udt:Indicator&gt;&quot; &amp; arAllowanceChargeIndicator(i) &amp; &quot;&lt;/udt:Indicator&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:ChargeIndicator&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:CalculationPercent&gt;&quot; &amp; arAllowanceChargePercent(i) &amp; &quot;&lt;/ram:CalculationPercent&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:BasisAmount&gt;&quot; &amp; arAllowanceChargeBaseAmount(i) &amp; &quot;&lt;/ram:BasisAmount&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:ActualAmount&gt;&quot; &amp; arAllowanceChargeAmount(i) &amp; &quot;&lt;/ram:ActualAmount&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:Reason&gt;&quot; &amp; arAllowanceChargeReason(i) &amp; &quot;&lt;/ram:Reason&gt;&quot; &amp; CHR(13)		
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:CategoryTradeTax&gt;&quot; &amp; CHR(13)			
		stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:TypeCode&gt;VAT&lt;/ram:TypeCode&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1; VAT: Value Added Tax → Mehrwertsteuer (Defaultwert)	
		stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:CategoryCode&gt;&quot; &amp; arAllowanceChargeTaxID(i) &amp; &quot;&lt;/ram:CategoryCode&gt;&quot; &amp; CHR(13) &apos;erforderlich 1…1		
		stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;ram:RateApplicablePercent&gt;&quot; &amp; arAllowanceChargeTax(i) &amp; &quot;&lt;/ram:RateApplicablePercent&gt;&quot; &amp; CHR(13)  &apos;nicht erforderlich 0…1; Angabe in Prozent*100, lässt sich aus dem Code von TaxCategory schließen
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:CategoryTradeTax&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:SpecifiedTradeAllowanceCharge&gt;&quot; &amp; CHR(13)
	NEXT
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:SpecifiedTradePaymentTerms&gt;&quot; &amp; CHR(13)	
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:Description&gt;&quot; &amp; CHR(13) &apos;erforderlich 1…1, wenn SpecifiedTradePaymentTerms vorhanden ist	
	stString = stString &amp; Trim(stZahlungNotiz) &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:Description&gt;&quot; &amp; CHR(13)	
	IF stRZahlungBisDatum &lt;&gt; &quot;&quot; THEN 
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:DueDateDateTime&gt;&quot; &amp; CHR(13)
		stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;udt:DateTimeString format=&quot;&quot;102&quot;&quot;&gt;&quot; &amp; stRZahlungBisDatum &amp; &quot;&lt;/udt:DateTimeString&gt;&quot; &amp; CHR(13) &apos;erforderlich 1…1, wenn SpecifiedTradePaymentTerms vorhanden ist	
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:DueDateDateTime&gt;&quot; &amp; CHR(13)
	END IF
	IF stIBANEmpfaenger &lt;&gt; &quot;&quot; AND stMandateID &lt;&gt; &quot;&quot; AND stGlaeubID &lt;&gt; &quot;&quot; THEN stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:DirectDebitMandateID&gt;&quot; &amp; stMandateID &amp; &quot;&lt;/ram:DirectDebitMandateID&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:SpecifiedTradePaymentTerms&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:SpecifiedTradeSettlementHeaderMonetarySummation&gt;&quot; &amp; CHR(13)	
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:LineTotalAmount&gt;&quot; &amp; stDataAmountTotal &amp; &quot;&lt;/ram:LineTotalAmount&gt;&quot; &amp; CHR(13)
	IF doChargeTotalAmount &lt;&gt; 0 THEN	
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:ChargeTotalAmount&gt;&quot; &amp; stChargeTotalAmount &amp; &quot;&lt;/ram:ChargeTotalAmount&gt;&quot; &amp; CHR(13)
	END IF
	IF doAllowanceTotalAmount &lt;&gt; 0 THEN	
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:AllowanceTotalAmount&gt;&quot; &amp; stAllowanceTotalAmount &amp; &quot;&lt;/ram:AllowanceTotalAmount&gt;&quot; &amp; CHR(13)
	END IF
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:TaxBasisTotalAmount&gt;&quot; &amp; stNetto &amp; &quot;&lt;/ram:TaxBasisTotalAmount&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:TaxTotalAmount currencyID=&quot;&quot;&quot; &amp; stDocumentCurrencyCode &amp; &quot;&quot;&quot;&gt;&quot; &amp; stSteuer &amp; &quot;&lt;/ram:TaxTotalAmount&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:GrandTotalAmount&gt;&quot; &amp; stBrutto &amp; &quot;&lt;/ram:GrandTotalAmount&gt;&quot; &amp; CHR(13)
	IF stPrepaidAmount &lt;&gt; &quot;&quot; THEN
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:TotalPrepaidAmount&gt;&quot; &amp; stPrepaidAmount &amp; &quot;&lt;/ram:TotalPrepaidAmount&gt;&quot; &amp; CHR(13)
	END IF
	stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:DuePayableAmount&gt;&quot; &amp; stPayableAmount &amp; &quot;&lt;/ram:DuePayableAmount&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:SpecifiedTradeSettlementHeaderMonetarySummation&gt;&quot; &amp; CHR(13)
	
	IF UBOUND(arDocRefID()) &gt; -1 THEN
		FOR i = 0 TO UBOUND(arDocRefID())
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:InvoiceReferencedDocument&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…n
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:IssuerAssignedID&gt;&quot; &amp; arDocRefID(i) &amp; &quot;&lt;/ram:IssuerAssignedID&gt;&quot; &amp; CHR(13)	&apos;erforderlich 1…1, wenn BillingReference vorhanden ist
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:FormattedIssueDateTime&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(5 * inTab) &amp; &quot;&lt;qdt:DateTimeString format=&quot;&quot;102&quot;&quot;&gt;&quot; &amp; arDocRefDate(i) &amp; &quot;&lt;/qdt:DateTimeString&gt;&quot; &amp; CHR(13) &apos;nicht erforderlich 0…1, wenn IssuerAssignedID eindeutig ist, !muss qdt sein, nicht udt!	
			stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;/ram:FormattedIssueDateTime&gt;&quot; &amp; CHR(13)
			stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:InvoiceReferencedDocument&gt;&quot; &amp; CHR(13)
    	NEXT
    END IF
	IF stAccounting &lt;&gt; &quot;&quot; THEN	
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;ram:ReceivableSpecifiedTradeAccountingAccount&gt;&quot; &amp; CHR(13)	
		stString = stString &amp; Space(4 * inTab) &amp; &quot;&lt;ram:ID&gt;&quot; &amp; stAccounting &amp; &quot;&lt;/ram:ID&gt;&quot; &amp; CHR(13)	&apos;nicht erforderlich 0…1 [BT-19]		
		stString = stString &amp; Space(3 * inTab) &amp; &quot;&lt;/ram:ReceivableSpecifiedTradeAccountingAccount&gt;&quot; &amp; CHR(13)
	END IF    
	stString = stString &amp; Space(2 * inTab) &amp; &quot;&lt;/ram:ApplicableHeaderTradeSettlement&gt;&quot; &amp; CHR(13)
	stString = stString &amp; Space(1 * inTab) &amp; &quot;&lt;/rsm:SupplyChainTradeTransaction&gt;&quot; &amp; CHR(13)
	stString = stString &amp; &quot;&lt;/rsm:CrossIndustryInvoice&gt;&quot; &amp; CHR(13)
	oOutputStream.writeString(stString)
	oOutputStream.closeOutput()
END SUB
</script:module>